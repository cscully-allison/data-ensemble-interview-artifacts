A1  
. . .And remind me to record by remember this time.

Participant 3  
It's nice to put a face to the name. I've been hearing for a while. 

A5  
Cool, you too. 

Participant 3  
I'm ready whenever you are.

A1  
Yeah. Great mute, then. Cool. And I'll try and make this reasonably fast for you. Because I know that you are defending your thesis tomorrow. I just found out so

Participant 3  
fine. I've been kind of going over the same concept over and over again. So I think I'll be fine. With the defense. Yeah.

A1  
Good. Yeah. Usually, yeah, like the day before. You've already practiced enough such. Yeah. All right. Um, so then did you get a chance to read the document that I attached to the email that I sent to you earlier?

Participant 3  
I did read it.

A1  
Okay. Yeah. All right. It's just, it's just like consent information. I'm gonna go over some of it over here, just to make sure that you get all the important bullet points. And then I'm just going to ask you for a verbal consent at the end to participate in the research. So that sounds good. 

Participant 3  
Yep. Sounds good. 

A1  
Cool. All right. So first, I want to start you off, start off by thanking you a lot, [P3], for agreeing to participate in this research, it really means a lot to us. And, you know, I appreciate that your time is very valuable. So thank you so much. So the purpose of this study is just sort of to explore how professional data users and tool developers think about ensembles of data, what aspects of said data are important. And you know what you're not this information will help us design better visualizations and tools for analysts, you know, kind of like we're doing with [EnsembleAPI] right now. This study, it's just a one on one interview, mainly and then like [A5] said, she's here to take notes and occasionally time chime in. And overall, we expect that's probably just gonna take about 30 minutes. I'm going to ask you a series of prompts regarding how you think about the performance data that you work with and I will also ask you to draw this data. And by the way, did you or do you have a tablet or a Okay, cool. Nice. Last time, I should mention, we were able to get a screenshare to work. Do you have Skype on your -- or sorry, zoom -- on your tablet there?

Participant 3  
I do yeah.

A1  
Okay, if you if you do Would you mind just like re popping back into this event coming back in for like the screenshare 

Participant 3  
Should I still keep this or like I try to join well from two sides or just from the iPads fine?

A1  
You can you can close this out and just join from the iPad is fine. 

Participant 3  
Okay, gotcha see you soon. 

A1  
Cool. Thanks, [P3], 

Participant 3  
Sure.

A1  
Welcome back, [P3], can you hear me okay? Yeah, I can hear you. Fine. Cool. Perfect. All right, then. Your share screen for later. Okay. So now as we go through the . . . as I go through these these questions that I'm going to ask you, I just want to emphasize that there are no right or wrong answers. So don't stress about that. It's just we want to hear your opinion and your thoughts on these things.

Participant 3  
Sounds good. All right.

A1  
And then just a few final notes. So first, I want to make an audio and video recording of this interview, as you know are recorded and keep a copy of the drawings that you produce. And all of this data will be anonymized and transcribed and only the research staff will have access to the original recordings, and finally, you may choose to leave or end the interview at any time. And this decision won't affect your relationship with the the interview team or anyone else associated with us. Gotcha. Cool. All right. And so do you consent to participate in this . . . project with us? 

Participant 3  
Yes, I do. 

A1  
Thank you [P3]. Okay, so let me start off with a kind of a basic demographic question here is, so what what project do you work on that uses ensembles of data?

Participant 3  
I work on a project called [EnsembleAPI], which is sorry, which is in collaboration with the [Lab]? And essentially, we have an ensemble of performance data. 

A1  
Okay, and can you describe that project in just a little bit more detail?

Participant 3  
Yes. So we're the part of the project just to build a performance data science tool. And this tool is based and coded in Python. And we allow multi runs, multi run performance data, which is basically multiple profiles to be stored into an object. And then that object has different components, like tables and call graph. And through that we allow exploratory data analysis of the performance data. 

A1  
Okay, thank you. And can you describe this data ensemble for me? More more detailed the data.

Participant 3  
Okay. Do you want to know the kind of the structure of the data the way it's stored?

A1  
Yeah, absolutely kind of anything that you think is important to help me understand the data.

Participant 3  
Okay. So, like I said, that data is stored in what we call a [EnsembleAPI] object. And it has three components.

 So the first one is the performance data, this is stored in a multi index form. And the two indexes, the two indices we use are, is the are the nodes, which are the basically the function calls that happened when a when a program is run. And the second one is a profile hash. So essentially, we're distinguishing each profile that we're reading into that object with a hash with a unique hash for each profile. 
 
 And then there's a second component, which is the metadata. That's a just simple table. And it's going to the first table, which is the performance data table with with that profile hash that we just talked about. So it's like a foreign key for for that table. And within that metadata table, we have information like, who who ran the program, how long, how long the program ran, when the launch date was, all that kind of information. So not strictly performance data, but kind of more information about the execution of the program for each of the profile.
 
And the third component is the aggregate statistics statistics table. And this is connected to the first table that we talked about, which is the performance data with respect to the nodes, which again is the list of function calls. And for the aggregates, statistics table, it's essentially an empty table, where we can take in the columns from the performance data table, and perform statistics calculations on them and store them into the aggregate statistics table. 

And one thing that's important to note is that the statistics and the performance data table they also have a call graph component to it. So they have a tree component to it. And these two represent the nodes and the relationship between the nodes. 

A1  
Perfect, all right. And you did you present these in a very particular way, starting with data and then moving over to metadata and stats. Is there any particular reason that you chose to order in that way and then to the tree last?

Participant 3  
Um, yes, because it also it also I also chose it to do that way because performance data is acts as sort of the main table, if you look at it from a relational database management system, our relational database management model. So the performance data is the mean data with multiple index and it's connected to to the two of these other tables through two of its indices from the muilt-index. And personally, I've worked mainly with metadata table. So that's why it took precedence compared to the statistics table. So I'm guessing if somebody from my team has worked on the statistics table, more would probably introduce the performance data, and then how the aggregate statistics table is connected to that. And then once we talk about the entire table, I bring the call call tree because that's a functionality we're still working on. And making sure like changes can be propagated to that data structure. So it's still a work in progress compared to the tables.

A1  
So thank you so much. Right now we're, we get to the interactive part. If I could get you to share your screen for me. And whatever drawing program you're using,

Participant 3  
Kay should be able to see that ability

A1  
to see and my own face down there. [laughs] All right, no,  you're fine.

Participant 3  
Okay, let me try to change that.

A1  
Oh, no, my Zoom is not happy.

I think it was yours.

Participant 3  
 Okay, I think you're still gonna see your face, if that's okay.

A1  
That's no, it's totally fine. It's totally fine. All right. So let's go. Alright, so for this bit right here, I'm just going to ask you, if you could, please, like sketch out the entirety of the data stored in this data set that you just described to me. 

Participant 3  
Okay. So just like an example of what it looks like, right.

By the way, are we talking about the entire like three components that I talked about?

A1  
Yes, everything to do with this with this data set?

Participant 3  
Don't have to think out loud?

A1  
Oh, yes. If you could think out loud while you're doing it'd be very helpful. Sorry, I should have told you to do that, my bad.

Participant 3  
Okay, so essentially, this is what I just mentioned, which is performance data. And like, you can see this has a multi index -- I'm gonna highlight is right here -- these are the indices. And so for example, in this specific case, we have base CUDA, which is the function call or what we call nodes. And for each node, we can have multiple profiles. So for our, I can say this two profiles can have the same function call or nodes. So these are the ones I've highlighted. So these, this is the node and then these are the two profiles that are associated with it. And information in here could be. . . problem size, block size, things like that. Basically performance metrics that can be stored here in the rest of the columns. So that's how the performance data table looks like. 

Then the then this is primarily what I've been working on. Just the metadata table, and is just a simple table. The index is just profiles and for relating to the performance data directly this would expand on the-- each profiles that are present and this would consist of meta data. So, values in this could be launchdate, user who started the program, things like that basically and I'm gonna again highlight the index column. You can see the relationship between these is through the profiles the profile hash. 

Then we can look at the statistics table which would be which would be initiated as an empty table with just the nodes and then a column that's called the name column. And so, the notes column will have let's say for this example "Base CUDA" and then it will also have type which is function and the name will be simply just consists the name of the node and this will be empty and again this will relate back to performance data with the nodes. 

And, again highlighting the index for this table and essentially there is a component like I said, which is shared by these two tables. Which is the call graph or call tree and we can assume that "Base CUDA" -- it's not good -- we can just assume for this case that "Base CUDA" is the main parent and then can have multiple other nodes as children notes. Sorry, okay, let me label this. And again, this is shared by the performance data table and the statistics table. So, this is how initially, the data structures inside the [EnsembleAPI] will look like the [EnsembleAPI] object would look like. 

And for the for the statistics table, you can additionally do things like calculate calculate the mean, or calculate the median of certain values. So, let's say problem size of the from the performance data, and then you can append it back to the table. So, you can do mean size. 

So, this is basically a kind of an overview of the different data structures and [EnsembleAPI]

A1  
Perfect, I love the different colors. Thank you.

Participant 3  
Yeah, my handwriting is not the best, but this helps.

A1  
It's pretty good. That's pretty good. All right. So, then I'm going to ask you some some questions about things that you might do with this data. And to start off with, I'm just going to ask, so if I wanted to say, relate how changing the number of CPUs that I allocate relates to the runtime of a single function, what portions of the data would I use?

Participant 3  
Um, I would think you would use the the performance data table

A1  
all right, cool. So just the performance data table you're thinking would be sufficient for that. 

Participant 3  
Yes.

A1  
 Okay. So how about if I want Want to compare the runtime differences between a code base run on like [Lab computer] and a code base run on AWS?

Participant 3  
I think it would still be the performance data table. I know that part of my team members or like coworkers, they're working on something that allows for that comparison. I'm not completely sure. But I think it's called a columnar join. So use parts of the performance data table to kind of make that differences and compare it within the performance data table. 

A1  
Gotcha. All right. And last question I have along these lines is if I want to find out which function called another function, what portion of the data would be most important for that?

Participant 3  
I think the call tree would be quite helpful. I know that we've developed a kind of a, we already have this Tree Structure and we have a very basic implementation of queries. So this this tool is actually an extension to [DatasetAPI], which is another performance analysis tool. And so we've implemented just a small part of the query. So you should be able to see kind of what are the children of the some of the function calls? And I think that's how you can find out okay, which functions are being called within member functions? 

A1  
Cool. Perfect. Thank you, [P3].

All right. And I've got, I've got another drawing question for for you, if you want to just like scroll down and give yourself some space. Okay. Perfect. All right. And this one, it's gonna be a lot more a lot more basic than the other one. So I'm just going to ask you to imagine a profile, we're gonna be drawing a profile of just it's a simple program with three functions. They're called A, B, and C. Okay, and each of these functions has a time associated with it. Function a took 30 seconds. Okay. function B took five seconds.

You're fine. 

Participant 3  
You said five seconds?

A1  
Yeah, five seconds. Okay. And function C took 100 seconds. All right, perfect. And if I could just get you to draw out this data for me and again, and feel free to use any abstractions or metaphors you'd like to describe it?

Participant 3  
Um, are they like, just separate independent functions?

A1  
Since this is a profile, they are probably related to each other. 

Participant 3  
Okay.

A1  
 Yeah, I could, I guess I'll tell you just to illustrate maybe a little bit more give a little bit more detail. Let's say that A calls both B and C.

Participant 3  
Um, so it doesn't have to be like a table. It can be any data structure,

A1  
However you want to represent it. 

Participant 3  
Okay.

Um, I think I'll just use a table then its probably the . . . 

I dont' know if you can see this.

I think this was just the easiest approach.

A1  
Yeah, it seems seems seems pretty logical and summarizes the data quite well. All right. And then I think that that's, that's it. That's all the questions I have for you.

Participant 3  
 Perfect. Awesome. 

A1  
And do you have any questions for me before we close this out today?

Participant 3  
Umm, not really just that, am I supposed to send this to you?

A1  
Yes. If you would, please send that to me via email. That'd be great. Or slack, whichever you prefer.

Participant 3  
Okay, I'll just send up your slack if that's okay. 

A1  
That's totally fine. That's great. 

A5  
Thanks so much [P3] from me, yeah. Totally appreciate it.

A1  
Yeah, so me and [A5] are gonna hang out here for a sec. So you're free to go whenever you like and get back to you know, practicing your talk. 

A5  
Yeah, good luck. Congratulations, on all that's coming.

Speaker 2  
Thank you. I appreciate it. Also, thank you, [A1] for the SQL guide, I think I did decent in the in the interview I had so I appreciate it?

A1  
Good. I'm glad to hear it. Ya know is my pleasure right? SQL it's fairly easy to pick up but it helps out to have a little bit of guidance.

Participant 3  
I'm glad Yeah, all right. Take care of both of you have a good day

A1  
no one in a way. Yeah.

Transcribed by https://otter.ai
